basePath: /api
definitions:
  model.Feedback:
    properties:
      areas_to_improve:
        items:
          type: string
        type: array
      behavior_score:
        type: number
      clarity_score:
        type: number
      communication_score:
        type: number
      confidence_score:
        type: number
      content_score:
        type: number
      created_at:
        type: string
      id:
        type: string
      interview:
        $ref: '#/definitions/model.Interview'
      interview_id:
        type: string
      overall_score:
        type: number
      relevance_score:
        type: number
      strengths:
        items:
          type: string
        type: array
      summary:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: string
    type: object
  model.Interview:
    properties:
      completed_questions:
        type: integer
      country:
        type: string
      created_at:
        type: string
      cv_url:
        type: string
      duration:
        type: integer
      ended_at:
        type: string
      feedback:
        $ref: '#/definitions/model.Feedback'
      id:
        type: string
      interview_language:
        description: |-
          ProgrammingLanguages array of strings
          swagger:allOf
          ProgrammingLanguages []string `json:"programming_languages"`
        type: string
      interview_type:
        type: string
      job_description:
        type: string
      job_type:
        type: string
      level:
        type: string
      mode:
        type: string
      programming_languages:
        description: ProgrammingLanguages pq.StringArray `gorm:"type:text[]" json:"programming_languages"`
        items:
          type: string
        type: array
      questions:
        items:
          $ref: '#/definitions/model.Question'
        type: array
      recording_url:
        type: string
      responses:
        items:
          $ref: '#/definitions/model.Response'
        type: array
      stage:
        type: string
      started_at:
        type: string
      total_questions:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: string
    type: object
  model.JSONB:
    additionalProperties: true
    type: object
  model.Question:
    properties:
      content:
        type: string
      created_at:
        type: string
      difficulty:
        type: string
      id:
        type: string
      interview:
        $ref: '#/definitions/model.Interview'
      interview_id:
        type: string
      order_index:
        type: integer
      response:
        $ref: '#/definitions/model.Response'
      type:
        type: string
      updated_at:
        type: string
    type: object
  model.Response:
    properties:
      audio_url:
        type: string
      content_analysis:
        $ref: '#/definitions/model.JSONB'
      created_at:
        type: string
      id:
        type: string
      interview:
        $ref: '#/definitions/model.Interview'
      interview_id:
        type: string
      question:
        $ref: '#/definitions/model.Question'
      question_id:
        type: string
      response_score:
        type: number
      text_response:
        type: string
      updated_at:
        type: string
      video_analysis:
        $ref: '#/definitions/model.JSONB'
      voice_analysis:
        $ref: '#/definitions/model.JSONB'
    type: object
  model.User:
    properties:
      active:
        type: boolean
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      interviews:
        items:
          $ref: '#/definitions/model.Interview'
        type: array
      language:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      updated_at:
        type: string
    type: object
  request.GenerateLivekitTokenRequest:
    properties:
      identity:
        example: userId-uuid
        type: string
      room:
        example: interview-id-uuid
        type: string
    required:
    - identity
    - room
    type: object
  request.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  response.CreateInterviewResponse:
    properties:
      interviewId:
        type: string
    type: object
  response.GenerateLivekitTokenResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  response.LoginResponse:
    properties:
      expires_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  response.SelectOption:
    properties:
      label:
        type: string
      value:
        type: string
    type: object
  response.SelectOptionsResponse:
    properties:
      countries:
        items:
          $ref: '#/definitions/response.SelectOption'
        type: array
      interviewTypes:
        items:
          $ref: '#/definitions/response.SelectOption'
        type: array
      jobTypes:
        items:
          $ref: '#/definitions/response.SelectOption'
        type: array
      languages:
        items:
          $ref: '#/definitions/response.SelectOption'
        type: array
      levels:
        items:
          $ref: '#/definitions/response.SelectOption'
        type: array
      programmingLanguages:
        items:
          $ref: '#/definitions/response.SelectOption'
        type: array
      stages:
        items:
          $ref: '#/definitions/response.SelectOption'
        type: array
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API Server for Interview AI Application
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Interview AI API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and returns a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Returns token, expiration time, and user information
          schema:
            $ref: '#/definitions/response.LoginResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - auth
  /interviews:
    get:
      consumes:
      - application/json
      description: Get a list of all interviews for the current user
      produces:
      - application/json
      responses:
        "200":
          description: List of interviews
          schema:
            items:
              $ref: '#/definitions/model.Interview'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: List user interviews
      tags:
      - interviews
    post:
      consumes:
      - multipart/form-data
      description: Create a new interview with the specified parameters
      parameters:
      - description: Experience level (e.g., JUNIOR, MIDDLE, SENIOR)
        in: formData
        name: level
        required: true
        type: string
      - description: Job type (e.g., BACKEND, FRONTEND)
        in: formData
        name: jobType
        required: true
        type: string
      - description: Programming languages array as JSON string
        in: formData
        name: programmingLanguages
        required: true
        type: string
      - description: Interview language (e.g., ENGLISH)
        in: formData
        name: interviewLanguage
        required: true
        type: string
      - description: Country (e.g., US, UK)
        in: formData
        name: country
        required: true
        type: string
      - description: Interview type (e.g., TECHNICAL, BEHAVIORAL)
        in: formData
        name: interviewType
        required: true
        type: string
      - description: Interview stage (e.g., SCREENING, FINAL)
        in: formData
        name: stage
        required: true
        type: string
      - description: Job description text
        in: formData
        name: jobDescription
        required: true
        type: string
      - description: Interview mode (e.g., TEXT_WITH_VOICE)
        in: formData
        name: mode
        required: true
        type: string
      - description: CV/Resume file (PDF or DOCX)
        in: formData
        name: cv
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created interview
          schema:
            $ref: '#/definitions/response.CreateInterviewResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Create a new interview
      tags:
      - interviews
  /interviews/{id}:
    get:
      consumes:
      - application/json
      description: Get detailed information about an interview
      parameters:
      - description: Interview ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Interview details
          schema:
            $ref: '#/definitions/model.Interview'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Interview not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get interview details
      tags:
      - interviews
  /interviews/options:
    get:
      consumes:
      - application/json
      description: Returns lists of options for dropdowns including countries, levels,
        languages, and programming languages
      produces:
      - application/json
      responses:
        "200":
          description: List of options for dropdowns
          schema:
            $ref: '#/definitions/response.SelectOptionsResponse'
      summary: Get selection options
      tags:
      - options
  /livekit/token:
    post:
      consumes:
      - application/json
      description: Generate a LiveKit JWT token for connecting to a room
      parameters:
      - description: Room and identity information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.GenerateLivekitTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Returns a JWT token
          schema:
            $ref: '#/definitions/response.GenerateLivekitTokenResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Generate LiveKit token
      tags:
      - livekit
  /me:
    get:
      consumes:
      - application/json
      description: Returns information about the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Not authenticated
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get authenticated user information
      tags:
      - auth
schemes:
- http
- https
swagger: "2.0"
